// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.polypharm.gescom.domain;

import com.polypharm.gescom.domain.Montage;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Montage_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Montage.entityManager;
    
    public static final EntityManager Montage.entityManager() {
        EntityManager em = new Montage().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Montage.countMontages() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Montage o", Long.class).getSingleResult();
    }
    
    public static List<Montage> Montage.findAllMontages() {
        return entityManager().createQuery("SELECT o FROM Montage o", Montage.class).getResultList();
    }
    
    public static Montage Montage.findMontage(Long id) {
        if (id == null) return null;
        return entityManager().find(Montage.class, id);
    }
    
    public static List<Montage> Montage.findMontageEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Montage o", Montage.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Montage.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Montage.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Montage attached = Montage.findMontage(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Montage.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Montage.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Montage Montage.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Montage merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
