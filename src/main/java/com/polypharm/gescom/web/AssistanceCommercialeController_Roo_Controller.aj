// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.polypharm.gescom.web;

import com.polypharm.gescom.domain.AssistanceCommerciale;
import com.polypharm.gescom.service.AssistanceCommercialeService;
import com.polypharm.gescom.web.AssistanceCommercialeController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect AssistanceCommercialeController_Roo_Controller {
    
    @Autowired
    AssistanceCommercialeService AssistanceCommercialeController.assistanceCommercialeService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String AssistanceCommercialeController.create(@Valid AssistanceCommerciale assistanceCommerciale, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, assistanceCommerciale);
            return "assistancecommerciales/create";
        }
        uiModel.asMap().clear();
        assistanceCommercialeService.saveAssistanceCommerciale(assistanceCommerciale);
        return "redirect:/assistancecommerciales/" + encodeUrlPathSegment(assistanceCommerciale.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String AssistanceCommercialeController.createForm(Model uiModel) {
        populateEditForm(uiModel, new AssistanceCommerciale());
        return "assistancecommerciales/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String AssistanceCommercialeController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("assistancecommerciale", assistanceCommercialeService.findAssistanceCommerciale(id));
        uiModel.addAttribute("itemId", id);
        return "assistancecommerciales/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String AssistanceCommercialeController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("assistancecommerciales", AssistanceCommerciale.findAssistanceCommercialeEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) assistanceCommercialeService.countAllAssistanceCommerciales() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("assistancecommerciales", AssistanceCommerciale.findAllAssistanceCommerciales(sortFieldName, sortOrder));
        }
        return "assistancecommerciales/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String AssistanceCommercialeController.update(@Valid AssistanceCommerciale assistanceCommerciale, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, assistanceCommerciale);
            return "assistancecommerciales/update";
        }
        uiModel.asMap().clear();
        assistanceCommercialeService.updateAssistanceCommerciale(assistanceCommerciale);
        return "redirect:/assistancecommerciales/" + encodeUrlPathSegment(assistanceCommerciale.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String AssistanceCommercialeController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, assistanceCommercialeService.findAssistanceCommerciale(id));
        return "assistancecommerciales/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String AssistanceCommercialeController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        AssistanceCommerciale assistanceCommerciale = assistanceCommercialeService.findAssistanceCommerciale(id);
        assistanceCommercialeService.deleteAssistanceCommerciale(assistanceCommerciale);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/assistancecommerciales";
    }
    
    void AssistanceCommercialeController.populateEditForm(Model uiModel, AssistanceCommerciale assistanceCommerciale) {
        uiModel.addAttribute("assistanceCommerciale", assistanceCommerciale);
    }
    
    String AssistanceCommercialeController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
